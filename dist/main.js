(()=>{"use strict";function t(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function e(e){t(1,arguments);var s=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===s?new Date(e.getTime()):"number"==typeof e||"[object Number]"===s?new Date(e):("string"!=typeof e&&"[object String]"!==s||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function s(s){t(1,arguments);var a=e(s);return a.setHours(0,0,0,0),a}function a(e,a){t(2,arguments);var o=s(e),r=s(a);return o.getTime()===r.getTime()}function o(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function r(s,a){t(1,arguments);var r=a||{},c=r.locale,n=c&&c.options&&c.options.weekStartsOn,i=null==n?0:o(n),l=null==r.weekStartsOn?i:o(r.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=e(s),u=d.getDay(),g=(u<l?7:0)+u-l;return d.setDate(d.getDate()-g),d.setHours(0,0,0,0),d}function c(e,s,a){t(2,arguments);var o=r(e,a),c=r(s,a);return o.getTime()===c.getTime()}class n{constructor(t){this.name=t,this.tasks=[],this.filter="all"}getName(){return this.name}setTasks(t){this.tasks=t}getFilter(){return this.filter}changeFilter(t){this.filter=t}getTasks(){return this.tasks}getTodayTasks(){return this.tasks.filter((e=>function(e){return t(1,arguments),a(e,Date.now())}(e.getDateFns())))}getWeekTasks(){return this.tasks.filter((e=>function(e,s){return t(1,arguments),c(e,Date.now(),s)}(e.getDateFns(),{weekStartsOn:1})))}getTask(t){return this.tasks.find((e=>e.getName()===t))}addTask(t){this.tasks.push(t)}deleteTask(t){this.tasks=this.tasks.filter((e=>e.getIDForTask()!==t))}}class i{constructor(){this.projects=[],this.projects.push(new n("All")),this.projects.push(new n("Today")),this.projects.push(new n("This Week"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getNonDefaultProjects(){return this.projects.filter((t=>"All"!==t.getName()||"Today"!==t.getName()||"This Week"!==t.getName()))}addProject(t){this.projects.push(new n(t))}getProject(t){return this.projects.find((e=>e.getName()===t))}deleteProject(t){this.projects=this.projects.filter((e=>e.getName()!==t))}getAllTasks(){let t=[];return this.projects.forEach((e=>{t=[...t,...e.getTasks()]})),t}getTask(t){for(let e of this.projects)if(e.getTasks().some((e=>e.getName()===t)))return e.getTasks().find((e=>e.getName()===t))}}class l{constructor(t,e,s,a,o=""){this.projectName=t,this.name=e,this.descript=s,this.priority=a,this.date=o,this.done=!1}getProjectName(){return this.projectName}setName(t){this.name=t}getName(){return this.name}setDescript(t){this.descript=t}getDescript(){return this.descript?this.descript:"..."}setPriority(t){this.priority=t}getPriority(){return this.priority}getIconPriority(){let t="";switch(this.priority){case"normal":t="";break;case"important":t="flag text-warning";break;case"crucial":t="exclamation-triangle text-danger"}return t}setDate(t){this.date=t}getDate(){return this.date}getDateFns(){return new Date(this.date.split("-").join(", "))}getDateFormatted(){return this.date?this.date.split("-").join("/"):"****/**/**"}getDone(){return this.done}switchDoneValue(){this.done=!this.done}getDoneCheckboxState(){let t="";switch(this.done){case!0:t="checked";break;case!1:t=""}return t}getIDForTask(){return this.getName().split(" ").join("")}}class d{static saveTodoList(t){localStorage.setItem("TodoList",JSON.stringify(t))}static getTodoList(){const t=Object.assign(new i,JSON.parse(localStorage.getItem("TodoList")));return t.setProjects(t.getProjects().map((t=>Object.assign(new n,t)))),t.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new l,t)))))),t}static addProject(t){const e=this.getTodoList();e.addProject(t),this.saveTodoList(e)}static addNewTaskToThisProject(t,e){const s=this.getTodoList();s.getProject(t).addTask(e),this.saveTodoList(s)}static deleteTaskFromThisProject(t,e){const s=this.getTodoList();s.getProject(t).deleteTask(e),this.saveTodoList(s)}static getProject(t){return this.getTodoList().getProject(t)}static deleteProject(t){const e=this.getTodoList();e.deleteProject(t),this.saveTodoList(e)}static getTasksFromOneProject(t){return this.getProject(t).getTasks()}static getDefaultTasks(t){const e=this.getTodoList().getNonDefaultProjects();let s=[];switch(t){case"All":e.forEach((t=>s=s.concat(t.getTasks())));break;case"Today":e.forEach((t=>s=s.concat(t.getTodayTasks())));break;case"This Week":e.forEach((t=>s=s.concat(t.getWeekTasks())))}return s}static changeProjectTaskFilter(t,e){const s=this.getTodoList();s.getProject(t).changeFilter(e),this.saveTodoList(s)}static getFilterOfProject(t){return this.getProject(t).getFilter()}}function u(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var g=864e5;function m(e,a){t(2,arguments);var o=s(e),r=s(a),c=o.getTime()-u(o),n=r.getTime()-u(r);return Math.round((c-n)/g)}function T(t,e){var s=t.getFullYear()-e.getFullYear()||t.getMonth()-e.getMonth()||t.getDate()-e.getDate()||t.getHours()-e.getHours()||t.getMinutes()-e.getMinutes()||t.getSeconds()-e.getSeconds()||t.getMilliseconds()-e.getMilliseconds();return s<0?-1:s>0?1:s}class h{static loadHomePage(){!function(){const t=document.querySelector("[data-projects-dropdown]"),e=t.querySelector("i");t.addEventListener("click",(()=>{e.classList.toggle("fa-caret-down"),e.classList.toggle("fa-caret-up")}))}(),function(){const t=document.querySelector("aside");document.querySelector(".openNav").addEventListener("click",(()=>{"-250px"===t.style.marginLeft?t.style.marginLeft="0":t.style.marginLeft="-250px"}));const e=window.matchMedia("(max-width: 950px)");function s(e){e.matches?t.style.marginLeft="-250px":t.style.marginLeft="0px"}document.querySelector("section").addEventListener("click",(()=>{e.matches&&(t.style.marginLeft="-250px")})),s(e),e.addListener((()=>{s(e)}))}(),h.initDefaultProjects(),h.loadProjects(),h.initSubmitAddProject(),h.initSubmitEditTask()}static initDefaultProjects(){document.querySelectorAll("[default-project]").forEach((t=>{t.addEventListener("click",(()=>{switch(t.querySelector("span").innerText){case"All":h.loadProject("All");break;case"Today":h.loadProject("Today");break;case"This Week":h.loadProject("This Week")}}))}))}static loadProjects(){h.clearAllProjects(),d.getTodoList().getProjects().forEach((t=>{"All"!==t.getName()&&"Today"!==t.getName()&&"This Week"!==t.getName()&&h.addProjectToUI(t.getName())})),h.initAllButtonProjects()}static clearAllProjects(){document.querySelector("[project-list]").innerHTML=""}static initSubmitAddProject(){document.querySelector("[submit-add-project]").addEventListener("submit",this.addProject)}static addProject(t){t.preventDefault();const e=document.querySelector("[input-project-name]").value;h.projectNameAlreadyExists(e)||(d.addProject(e),h.addProjectToUI(e),h.initAllButtonProjects(),h.clearAddProjectInput(),document.querySelector("[button-cancel-project]").click()),h.initButtonProject(e).click()}static addProjectToUI(t){document.querySelector("[project-list]").innerHTML+=`\n            <div class="task-view-as" project><i class="fas fa-tasks me-3"></i><span>${t}</span></div>`,h.closeNavInSmallDevices()}static initAllButtonProjects(){document.querySelectorAll("[project]").forEach((t=>{const e=t.querySelector("span").innerText;h.initButtonProject(e)}))}static initButtonProject(t){const e=Array.from(document.querySelectorAll("[project]")).find((e=>e.querySelector("span").innerText===t));return e.addEventListener("click",(()=>{h.loadProject(t)})),e}static loadProject(t){h.loadProjectPageContentToUI(t),h.addActiveStyle(t),h.initSubmitAddNewTask(),"All"!==t&&"Today"!==t&&"This Week"!==t&&h.initDeleteProjectButton(),h.initSortButton(),h.addAllTasksOfThisProjectToUI(),h.closeNavInSmallDevices()}static projectNameAlreadyExists(t){return!!d.getTodoList().getProjects().some((e=>e.getName().toLowerCase()===t.toLowerCase()))&&(alert("Project Name Already Exists."),!0)}static loadProjectPageContentToUI(t){const e=document.querySelector(".content");let s='\n        <div class="add-task mb-2" data-bs-toggle="modal" data-bs-target="#add-task" button-add-new-task><i class="fas fa-plus me-3"><span>New Task</span></i></div>\n        ';"Today"!==t&&"This Week"!==t||(s="");let a='\n        <i class="delete-project-button fas fa-times" title="Delete Project" button-delete-project></i>';"All"!==t&&"Today"!==t&&"This Week"!==t||(a=""),e.innerHTML="",e.innerHTML+=`\n            <div class="view-as d-flex justify-content-between">\n                <span project-name>${t}</span>\n                <div class="dropstart">\n                    <button type="button" class="btn dropdown-toggle shadow-none " data-bs-toggle="dropdown"><span></span>: <em class="me-1" sort-by>${d.getFilterOfProject(t)}</em></button>\n                  \n                </div>\n            </div>\n            ${s}\n            <div class="task-list">\n            </div>\n            ${a}\n        `,h.sortSelectEffect()}static addActiveStyle(t){const e=document.querySelectorAll("[project]"),s=document.querySelectorAll("[default-project]");e.forEach((t=>t.classList.remove("active"))),s.forEach((t=>t.classList.remove("active"))),("All"===t||"Today"===t||"This Week"===t?s:e).forEach((e=>{e.querySelector("span").innerText===t&&e.classList.add("active")}))}static initSubmitAddNewTask(){document.querySelector("[submit-add-new-task]").addEventListener("submit",this.addOneTask)}static initSortButton(){document.querySelectorAll("[data-sort]").forEach((t=>t.addEventListener("click",h.filterTasks)))}static filterTasks(){const t=this.innerText;d.changeProjectTaskFilter(h.getCurrentProjectName(),t),h.addAllTasksOfThisProjectToUI()}static initDeleteProjectButton(){document.querySelector("[button-delete-project]").addEventListener("click",this.deleteThisProject)}static deleteThisProject(){const t=document.querySelector("[project-name]").innerText;d.deleteProject(t),h.clearProjectUIContent(),h.loadProjects()}static clearProjectUIContent(){document.querySelector(".content").innerHTML="",h.closeNavInSmallDevices()}static addAllTasksOfThisProjectToUI(){const t=h.getCurrentProjectName();let e=d.getTasksFromOneProject(t);"All"!==t&&"Today"!==t&&"This Week"!==t||(e=d.getDefaultTasks(t)),"incomplete"===d.getFilterOfProject(t)&&(e=e.filter((t=>!1===t.getDone()))),document.querySelector(".task-list").innerHTML="",e.forEach((e=>{document.querySelector(".task-list").innerHTML+=`\n        <div TASK${e.getIDForTask()}>\n            <div class="task">\n                <div class="first-group">\n                    <input class="form-check-input shadow-none me-3" type="checkbox"  ${e.getDoneCheckboxState()} done-checkbox="${e.getProjectName()}"/>\n                    <span>${e.getName()}</span>\n                </div>\n                <div class="second-group">\n                    <i class="icon fas fa-${e.getIconPriority()}"></i>\n                    <button type="button" class="details btn btn-secondary shadow-none" data-bs-toggle="collapse" data-bs-target="#_${e.getIDForTask()}">Details</button>\n                    <span class="date">${e.getDateFormatted()}</span>\n                    <i class="fas fa-edit edit" data-bs-toggle="modal" title="edit" data-bs-target="#edit-task" edit-button="${e.getName()}"></i>\n                    <i class="fas fa-trash-alt delete" delete-task="${e.getIDForTask()}" title="delete"></i>\n                </div>\n            </div>\n            <div class="collapse" id="_${e.getIDForTask()}">\n                <div class="card card-body rounded-0 border-top-0 border-bottom-0 pt-2 pb-0" style="background-color: oldlace;">\n                ${"All"===t||"Today"===t||"This Week"===t?`<p class="mb-0"><b>Project: </b><span>${e.getProjectName()}</span></p>`:""}\n                    <p class="mb-0"><b>Date: </b><span class="date">${e.getDateFormatted()}</span></p>\n                    <p class="mb-0"><b>Priority: </b>${e.getPriority()} <i class="icon fas fa-${e.getIconPriority()}"></i></p>\n                    <p class="mb-0">\n                        <b>Description: </b>${e.getDescript()}\n                    </p>\n                </div>\n            </div>\n        </div>`,h.isPastEffect(e),h.addDoneEffect(e)})),h.initAllCheckBoxes(),h.initAllEditButtons(),h.initAllDeleteButtons()}static addDoneEffect(t){document.querySelector(`[TASK${t.getIDForTask()}]`).querySelectorAll("i.icon")}static initAllCheckBoxes(){document.querySelectorAll("[done-checkbox]").forEach((t=>t.addEventListener("change",this.switchDoneStatus)))}static switchDoneStatus(){this.checked?this.removeAttribute("checked"):this.setAttribute("checked",""),h.addDoneEffectAll(this)}static addDoneEffectAll(t){const e=t.nextElementSibling.innerText,s=d.getTodoList();s.getProject(t.getAttribute("done-checkbox")).getTask(e).switchDoneValue(),d.saveTodoList(s),h.addAllTasksOfThisProjectToUI()}static initAllEditButtons(){document.querySelectorAll("[edit-button]").forEach((t=>t.addEventListener("click",h.openEditTask)))}static taskNameBeingEdited="";static openEditTask(){const t=this.getAttribute("edit-button");!function(){const e=d.getTodoList().getTask(t);document.querySelector("[edit-task-project-name]").innerText=e.getProjectName(),document.querySelector("[edit-task-name]").value=e.getName(),document.querySelector("[edit-task-descript]").value=e.getDescript(),document.querySelector("[edit-task-priority]").value=e.getPriority(),document.querySelector("[edit-task-date]").value=e.getDate()}(),h.taskNameBeingEdited=t}static initSubmitEditTask(){document.querySelector("[submit-edit-task]").addEventListener("submit",(t=>{t.preventDefault(),h.updateTask(h.taskNameBeingEdited)}))}static updateTask(t){if(!h.taskNameAlreadyExists(!0,t)){const e=d.getTodoList(),s=e.getTask(t);s.setName(document.querySelector("[edit-task-name]").value),s.setDescript(document.querySelector("[edit-task-descript]").value),s.setPriority(document.querySelector("[edit-task-priority]").value),s.setDate(document.querySelector("[edit-task-date]").value),d.saveTodoList(e),document.querySelector("[button-cancel-edit-task]").click(),h.addAllTasksOfThisProjectToUI()}}static saveTaskToStorage(){const t=[document.querySelector("[task-name]").value,document.querySelector("[task-descript]").value,document.querySelector("[task-priority]").value,document.querySelector("[task-date]").value],e=h.getCurrentProjectName();d.addNewTaskToThisProject(e,new l(e,...t))}static initAllDeleteButtons(){document.querySelectorAll("[delete-task]").forEach((t=>t.addEventListener("click",h.deleteThisTask)))}static deleteThisTask(){const t=this.getAttribute("delete-task");document.querySelector(`[TASK${t}]`).outerHTML="",d.deleteTaskFromThisProject(h.getCurrentProjectName(),t)}static isPastEffect(s){const a=document.querySelector(`[TASK${s.getIDForTask()}] span.date`),o=document.querySelector(`#_${s.getIDForTask()} .date`),r=s.getDate().split("-").map((t=>parseInt(t))),c=(new Date).toISOString().slice(0,10).split("-").map((t=>parseInt(t)));(function(s,a){t(2,arguments);var o=e(s),r=e(a),c=T(o,r),n=Math.abs(m(o,r));o.setDate(o.getDate()-c*n);var i=Number(T(o,r)===-c),l=c*(n-i);return 0===l?0:l})(new Date(r[0],r[1]-1,r[2]),new Date(c[0],c[1]-1,c[2]))<=3&&(a.style.cssText=`color:rgb(240, 173, 78${s.getDone()?", 0.2":", 1"});font-weight: 900;`,o.style.cssText=`color:rgb(240, 173, 78${s.getDone()?", 0.2":", 1"});font-weight: 900;`),function(s){return t(1,arguments),e(s).getTime()<Date.now()}(new Date(r[0],r[1]-1,r[2]+1))&&(a.style.cssText=`color:rgb(255, 0, 0${s.getDone()?", 0.1":", 1"});font-weight: 700;`,o.style.cssText=`color:rgb(255, 0, 0${s.getDone()?", 0.1":", 1"});font-weight: 700;`)}static closeNavInSmallDevices(){window.matchMedia("(max-width: 950px)").matches&&document.querySelector(".openNav").click()}static sortSelectEffect(){const t=document.querySelectorAll("[data-sort]"),e=document.querySelector("[sort-by]");t.forEach((t=>t.addEventListener("click",(()=>{e.innerText=t.innerText}))))}static taskNameAlreadyExists(t=!1,e){let s=d.getTodoList().getAllTasks(),a=document.querySelector("[task-name]").value;return!(t&&(a=document.querySelector("[edit-task-name]").value,a==e)||!s.some((t=>t.getName()==a))||(alert("Task Name Already Exists"),0))}static addOneTask(t){t.preventDefault(),h.taskNameAlreadyExists()||(h.saveTaskToStorage(),h.addAllTasksOfThisProjectToUI(),h.clearInputsOfAddTask(),document.querySelector("[button-cancel-add-task]").click())}static clearInputsOfAddTask(){document.querySelector("[task-name]").value="",document.querySelector("[task-descript]").value="",document.querySelector("[task-date]").value="",document.querySelector("[task-priority]").value="normal"}static getCurrentProjectName(){return document.querySelector("[project-name]").innerText}static clearAddProjectInput(){document.querySelector("[input-project-name]").value=""}}window.addEventListener("DOMContentLoaded",h.loadHomepage)})();